[supervisord]
logfile = {{PROJECT_DIR}}/var/supervisord_celery.log
logfile_maxbytes = 50MB
loglevel = info
pidfile = {{PROJECT_DIR}}/var/supervisord_celery.pid
umask = 002
environment = {% for k,v in STARTUP_ENV.items %}{% if not forloop.first %},{% endif %}{{k}}={{v}}{% endfor %}

[inet_http_server]
port = 127.0.0.1:9002
#username = user
#password = 123

[supervisorctl]
serverurl = http://localhost:9002
#username = chris
#password = 123
prompt = mysupervisor

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[program:celeryworker]
command={{PROJECT_DIR}}/manage celery worker
stderr_logfile = {{PROJECT_DIR}}/var/{{SERVER_NAME}}-{{PORT}}-celeryworker.err.log
stdout_logfile = {{PROJECT_DIR}}/var/{{SERVER_NAME}}-{{PORT}}-celeryworker.out.log
directory={{PROJECT_DIR}}
umask = 002

### This can only run on one machine.
### Need to create a wrapper to check a db entry or some other singleton
### To provide failover and make sure only one beat server runs.
### Perhaps create a custom scheduler
#[program:celerybeat]
#command={{PROJECT_DIR}}/manage celery beat -s {{PROJECT_DIR}}/var/{{SERVER_NAME}}-{{PORT}}-celerybeat-schedule
#stderr_logfile = {{PROJECT_DIR}}/var/{{SERVER_NAME}}-{{PORT}}-celerybeat.err.log
#stdout_logfile = {{PROJECT_DIR}}/var/{{SERVER_NAME}}-{{PORT}}-celerybeat.out.log
#directory={{PROJECT_DIR}}
#umask = 002
